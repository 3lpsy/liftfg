//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "gym")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::gym_profile::Entity")]
    GymProfile,
    #[sea_orm(has_many = "super::profile::Entity")]
    Profile,
}

impl Related<super::gym_profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GymProfile.def()
    }
}

// Through pivot
impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        super::gym_profile::Relation::Profile.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::gym_profile::Relation::Gym.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
