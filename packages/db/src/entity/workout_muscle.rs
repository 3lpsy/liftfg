//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

use crate::data::enums::ExercisePromptStrategy;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "workout_muscle")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub volume: i32,
    pub priority: i32,
    pub workout_id: i32,
    pub exercise_set_split: Option<i32>,
    pub muscle_id: i32,
    pub exercise_prompt_strategy: Option<ExercisePromptStrategy>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    // direct
    #[sea_orm(
        belongs_to = "super::muscle::Entity",
        from = "Column::MuscleId",
        to = "super::muscle::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Muscle,
    #[sea_orm(
        belongs_to = "super::workout::Entity",
        from = "Column::WorkoutId",
        to = "super::workout::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Workout,
}

impl Related<super::muscle::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Muscle.def()
    }
}

impl Related<super::workout::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Workout.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
