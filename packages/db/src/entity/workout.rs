//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::data::enums::{ExercisePromptStrategy, ExerciseSplitStrategy, MuscleOrderStrategy};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "workout")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub code: String,
    pub muscle_order_strategy: MuscleOrderStrategy,
    pub exercise_prompt_strategy: ExercisePromptStrategy,
    pub exercise_split_strategy: ExerciseSplitStrategy,
    pub exercise_set_split: i32,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    // direct
    #[sea_orm(has_many = "super::profile_workout::Entity")]
    ProfileWorkout,
    #[sea_orm(has_many = "super::workout_muscle::Entity")]
    WorkoutMuscle,
    // indirect
    #[sea_orm(has_many = "super::profile::Entity")]
    Profile,
}

// direct
impl Related<super::profile_workout::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileWorkout.def()
    }
}

impl Related<super::workout_muscle::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkoutMuscle.def()
    }
}

// indirect
impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        super::profile_workout::Relation::Profile.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::profile_workout::Relation::Profile.def().rev())
    }
}
impl ActiveModelBehavior for ActiveModel {}
