//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "program_target_muscle")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub sets: i32,
    pub program_id: i32,
    pub target_muscle_id: i32,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::program::Entity",
        from = "Column::ProgramId",
        to = "super::program::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Program,
    #[sea_orm(
        belongs_to = "super::target_muscle::Entity",
        from = "Column::TargetMuscleId",
        to = "super::target_muscle::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TargetMuscle,
}

impl Related<super::program::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Program.def()
    }
}

impl Related<super::target_muscle::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TargetMuscle.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
