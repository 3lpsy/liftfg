//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "gym")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::gym_user::Entity")]
    GymUser,
    #[sea_orm(has_many = "super::user::Entity")]
    User,
}

impl Related<super::gym_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GymUser.def()
    }
}

impl Related<super::user::Entity> for Entity {
    // The final relation is Cake -> CakeFilling -> Filling
    fn to() -> RelationDef {
        super::gym_user::Relation::User.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::gym_user::Relation::Gym.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
